#Salinity of your samples
s<-Mass[Mass$sample==name,3]
#s<-Mass[name,2]
#mass of sample in g: changed with every sample
#mass<-Mass[name,1]
mass<-Mass[Mass$sample==name,2]
#sample.index<-Mass[Mass$Sample.ID1==name,3]# this is the order that the sample was run
#-------------------------------------------------------------------
#Calculate TA
#at function is based on code in saecarb package by Steeve Comeau, Heloise Lavigne and Jean-Pierre Gattuso
TA[i,1]<-name
TA[i,2]<-1000000*at(S=s,T=mean(Data$Temperature[mV], na.rm=T), C=c, d=d, pHTris=NULL, ETris=NULL, weight=mass, E=Data$mV[mV], volume=Data$Volume[mV])
TA[i,3]<-mass
#TA[i,4]<-sample.index
}
TA[,2:3]<-sapply(TA[,2:3], as.numeric) # make sure the appropriate columns are numeric
#exports your data as a CSV file
write.table(TA,paste0(path,"/","TA_Output_",titrationfile),sep=",", row.names=FALSE)
#Cumulative TA
cumu.data <- read.csv("Data/Cumulative_TA_Output.csv", header=TRUE, sep=",")
update.data <- rbind(cumu.data, TA)
write.table(update.data,"Data/Cumulative_TA_Output.csv",sep=",", row.names=FALSE)
#Calculate total alkalinity using potentiometric titrations
#Uses a for loop to read in data exported as a titration file and calculate Total alkalinity
#At the end it exports your data as a .csv file. Comment the last line out if your don't want that.
### Files needed ######
# 1. pHCalibration.csv in your "Data" folder
#Inside the Data folder You must have a subfolder for each data set. In each subfolder there is:
#2. the mass file for your run
#3. a subfolder named "TodaysDate" (where all of your titration files are) directly exported from LabX.
#
#Created by Nyssa Silbiger 03/28/2014
#modified 20180627 Hollie Putnam
#new acid bottle 20180712 Emma Strand
#line 68 changed SampleID to Sample.ID - Sam Gurr 20180713
#
#------------------------------------------------------------
rm(list=ls())
#set working directory---------------------------------------------------------------------------------------------
setwd("C:/Users/samjg/Documents/My_Projects/Geoduck_transgen_offspring_OA/RAnalysis")
#setwd("~/MyProjects/UW_TA_2016/RAnalysis/")
main<-getwd()
#load libraries----------------------------------------------
library(seacarb) #used to calculate TA
library(tidyverse)
#CHANGE THESE VALUES EVERY DAY----------------------------------------------
path<-"Data/TA/20190408" #the location of all your titration files
massfile<-"20190408mass_RUN1.csv" # name of your file with masses
titrationfile<-'20190408_RUN1.csv'# name of the last titration file run
# Date that the data were run
date<-'20190408'
#DO NOT CHANGE ANYTHING BELOW THIS LINE UNLESS A NEW BOTTLE OF ACID IS USED
#load Data---------------------------------------------------
#load Mass Data
Mass<-read.csv(file.path(path,massfile), header=T, sep=",", na.string="NA", as.is=T)
#### pH Calibration #####
pHCal<-read.csv('Data/pHCalibration.csv') # read in the pH Calibration file
#select the calibration for the correct date
pHData<-pHCal[pHCal$Date==date,]
# calculate pH 3 and 3.5 based on the slope and intercept from pH 4, 7, and 10 calibration
mod.pH<-lm(c(pHData$pH4, pHData$pH7, pHData$pH10)~c(4,7,10)) # linear model
# print a plot of the relationship between pH and mV
#png(paste0(path,"/",Sys.Date(),'pHmvplot.png'), height = 400, width = 400)
plot(c(4,7,10), c(pHData$pH4, pHData$pH7, pHData$pH10), xlab = 'pH', ylab = 'mv')
lines(c(4,7,10), predict(mod.pH))
R2<-summary(mod.pH)$r.squared
legend('topright', legend = bquote(R^2 == .(format(R2, digits = 3))), bty='n')
#dev.off()
# Select the mV for pH=3 and pH=3.5 based on your probe calibration
pH35<-mod.pH$coefficients[1]+mod.pH$coefficients[2]*3.5
pH3<-mod.pH$coefficients[1]+mod.pH$coefficients[2]*3
##### titration###########
#create an empty matrix to put the TA values in
nrows<-nrow(Mass) # number of rows in a mass file
TA <- data.frame(matrix(nrow = nrows, ncol = 3))
rownames(TA)<-Mass$Sample.ID1[1:nrows]
colnames(TA)<-c("Sample.ID",'TA','Mass') # changed SampleID to Sample.ID
#run a for loop to bring in the titration files one at a time and calculate TA
# read in the mega concatenated titration results file
filename<-file.path(path,titrationfile)
AllData<-read.csv(filename, sep=",", na.string="NA",as.is=T, skip=12)[ ,1:5]
#AllData <- AllData[-1,]
# Identifies rows starting with zero seconds "0" in column 2
sample_name_positions <- c(1,grep("^0", AllData[,2]), nrow(AllData))
sample_name_positions <- sample_name_positions[-1] #remove first report of duplicated 1
## parse through all the data in the one file ###
sample_names<-Mass$sample
# create a list with all the sample IDs
sample_names_list <- list()
for (item in 1:length(sample_names)){
sample_names_list[[item]] <- sample_names[item]
}
# fill the list with the data from each sample
for (i in 1:nrows){
sample_names_list[[i]]<-data.frame(AllData[sample_name_positions[i]:sample_name_positions[i+1],])
colnames(sample_names_list[[i]])<-c("Volume","Time","mV","Temperature","dV/dt")
}
for(i in 1:nrows) {
#  Data<-read.csv(file.names[i], header=F, sep=",", na.string="NA",as.is=T, skip=10)[ ,1:5]
# colnames(Data) <-  c("Volume","Time",	"mV",	"Temperature",	"dV/dt")
Data<-sample_names_list[[i]]
# everything was brought in as a character because of the second line, converts back to numeric
Data$mV<-suppressWarnings(as.numeric(Data$mV)) ## supress the warnings since NA will be produced through coercion
Data$Temperature<-suppressWarnings(as.numeric(Data$Temperature)) ## supress the warnings since NA will be produced through coercion
Data$Volume<-suppressWarnings(as.numeric(Data$Volume)) ## supress the warnings since NA will be produced through coercion
#name of the file without .csv
#name<-unlist(strsplit(file.names[i], split='.', fixed=TRUE))[1]
name<-sample_names[i]
#calculates the index of values between pH 2 and 3.5
mV<-which(Data$mV<pH3 & Data$mV>pH35)
#CHANGE ONLY WHEN NEW BOTTLE OF ACID IS USED----------------------------------
#Bottle A15 20190218 SJG  - acid titrant# ,
#density of your titrant: change every time acid is changed
d<-1.02901 -(0.0001233*mean(Data$Temperature[mV], na.rm=T)) - (0.0000037*(mean(Data$Temperature[mV], na.rm=T)^2))
#Batch A15
#concentration of your titrant: CHANGE EVERYTIME ACID IS CHANGED
c<-0.100146 #Batch A15 first used by SJG on 20190218 NEW
#------------------------------------------------------------------------------
#Salinity of your samples
s<-Mass[Mass$sample==name,3]
#s<-Mass[name,2]
#mass of sample in g: changed with every sample
#mass<-Mass[name,1]
mass<-Mass[Mass$sample==name,2]
#sample.index<-Mass[Mass$Sample.ID1==name,3]# this is the order that the sample was run
#-------------------------------------------------------------------
#Calculate TA
#at function is based on code in saecarb package by Steeve Comeau, Heloise Lavigne and Jean-Pierre Gattuso
TA[i,1]<-name
TA[i,2]<-1000000*at(S=s,T=mean(Data$Temperature[mV], na.rm=T), C=c, d=d, pHTris=NULL, ETris=NULL, weight=mass, E=Data$mV[mV], volume=Data$Volume[mV])
TA[i,3]<-mass
#TA[i,4]<-sample.index
}
TA[,2:3]<-sapply(TA[,2:3], as.numeric) # make sure the appropriate columns are numeric
#exports your data as a CSV file
write.table(TA,paste0(path,"/","TA_Output_",titrationfile),sep=",", row.names=FALSE)
#Cumulative TA
cumu.data <- read.csv("Data/Cumulative_TA_Output.csv", header=TRUE, sep=",")
update.data <- rbind(cumu.data, TA)
write.table(update.data,"Data/Cumulative_TA_Output.csv",sep=",", row.names=FALSE)
#Calculate total alkalinity using potentiometric titrations
#Uses a for loop to read in data exported as a titration file and calculate Total alkalinity
#At the end it exports your data as a .csv file. Comment the last line out if your don't want that.
### Files needed ######
# 1. pHCalibration.csv in your "Data" folder
#Inside the Data folder You must have a subfolder for each data set. In each subfolder there is:
#2. the mass file for your run
#3. a subfolder named "TodaysDate" (where all of your titration files are) directly exported from LabX.
#
#Created by Nyssa Silbiger 03/28/2014
#modified 20180627 Hollie Putnam
#new acid bottle 20180712 Emma Strand
#line 68 changed SampleID to Sample.ID - Sam Gurr 20180713
#
#------------------------------------------------------------
rm(list=ls())
#set working directory---------------------------------------------------------------------------------------------
setwd("C:/Users/samjg/Documents/My_Projects/Geoduck_transgen_offspring_OA/RAnalysis")
#setwd("~/MyProjects/UW_TA_2016/RAnalysis/")
main<-getwd()
#load libraries----------------------------------------------
library(seacarb) #used to calculate TA
library(tidyverse)
#CHANGE THESE VALUES EVERY DAY----------------------------------------------
path<-"Data/TA/20190408" #the location of all your titration files
massfile<-"20190408mass_RUN2.csv" # name of your file with masses
titrationfile<-'20190408_RUN2.csv'# name of the last titration file run
# Date that the data were run
date<-'20190408'
#DO NOT CHANGE ANYTHING BELOW THIS LINE UNLESS A NEW BOTTLE OF ACID IS USED
#load Data---------------------------------------------------
#load Mass Data
Mass<-read.csv(file.path(path,massfile), header=T, sep=",", na.string="NA", as.is=T)
#### pH Calibration #####
pHCal<-read.csv('Data/pHCalibration.csv') # read in the pH Calibration file
#select the calibration for the correct date
pHData<-pHCal[pHCal$Date==date,]
# calculate pH 3 and 3.5 based on the slope and intercept from pH 4, 7, and 10 calibration
mod.pH<-lm(c(pHData$pH4, pHData$pH7, pHData$pH10)~c(4,7,10)) # linear model
# print a plot of the relationship between pH and mV
#png(paste0(path,"/",Sys.Date(),'pHmvplot.png'), height = 400, width = 400)
plot(c(4,7,10), c(pHData$pH4, pHData$pH7, pHData$pH10), xlab = 'pH', ylab = 'mv')
lines(c(4,7,10), predict(mod.pH))
R2<-summary(mod.pH)$r.squared
legend('topright', legend = bquote(R^2 == .(format(R2, digits = 3))), bty='n')
#dev.off()
# Select the mV for pH=3 and pH=3.5 based on your probe calibration
pH35<-mod.pH$coefficients[1]+mod.pH$coefficients[2]*3.5
pH3<-mod.pH$coefficients[1]+mod.pH$coefficients[2]*3
##### titration###########
#create an empty matrix to put the TA values in
nrows<-nrow(Mass) # number of rows in a mass file
TA <- data.frame(matrix(nrow = nrows, ncol = 3))
rownames(TA)<-Mass$Sample.ID1[1:nrows]
colnames(TA)<-c("Sample.ID",'TA','Mass') # changed SampleID to Sample.ID
#run a for loop to bring in the titration files one at a time and calculate TA
# read in the mega concatenated titration results file
filename<-file.path(path,titrationfile)
AllData<-read.csv(filename, sep=",", na.string="NA",as.is=T, skip=12)[ ,1:5]
#AllData <- AllData[-1,]
# Identifies rows starting with zero seconds "0" in column 2
sample_name_positions <- c(1,grep("^0", AllData[,2]), nrow(AllData))
sample_name_positions <- sample_name_positions[-1] #remove first report of duplicated 1
## parse through all the data in the one file ###
sample_names<-Mass$sample
# create a list with all the sample IDs
sample_names_list <- list()
for (item in 1:length(sample_names)){
sample_names_list[[item]] <- sample_names[item]
}
# fill the list with the data from each sample
for (i in 1:nrows){
sample_names_list[[i]]<-data.frame(AllData[sample_name_positions[i]:sample_name_positions[i+1],])
colnames(sample_names_list[[i]])<-c("Volume","Time","mV","Temperature","dV/dt")
}
for(i in 1:nrows) {
#  Data<-read.csv(file.names[i], header=F, sep=",", na.string="NA",as.is=T, skip=10)[ ,1:5]
# colnames(Data) <-  c("Volume","Time",	"mV",	"Temperature",	"dV/dt")
Data<-sample_names_list[[i]]
# everything was brought in as a character because of the second line, converts back to numeric
Data$mV<-suppressWarnings(as.numeric(Data$mV)) ## supress the warnings since NA will be produced through coercion
Data$Temperature<-suppressWarnings(as.numeric(Data$Temperature)) ## supress the warnings since NA will be produced through coercion
Data$Volume<-suppressWarnings(as.numeric(Data$Volume)) ## supress the warnings since NA will be produced through coercion
#name of the file without .csv
#name<-unlist(strsplit(file.names[i], split='.', fixed=TRUE))[1]
name<-sample_names[i]
#calculates the index of values between pH 2 and 3.5
mV<-which(Data$mV<pH3 & Data$mV>pH35)
#CHANGE ONLY WHEN NEW BOTTLE OF ACID IS USED----------------------------------
#Bottle A15 20190218 SJG  - acid titrant# ,
#density of your titrant: change every time acid is changed
d<-1.02901 -(0.0001233*mean(Data$Temperature[mV], na.rm=T)) - (0.0000037*(mean(Data$Temperature[mV], na.rm=T)^2))
#Batch A15
#concentration of your titrant: CHANGE EVERYTIME ACID IS CHANGED
c<-0.100146 #Batch A15 first used by SJG on 20190218 NEW
#------------------------------------------------------------------------------
#Salinity of your samples
s<-Mass[Mass$sample==name,3]
#s<-Mass[name,2]
#mass of sample in g: changed with every sample
#mass<-Mass[name,1]
mass<-Mass[Mass$sample==name,2]
#sample.index<-Mass[Mass$Sample.ID1==name,3]# this is the order that the sample was run
#-------------------------------------------------------------------
#Calculate TA
#at function is based on code in saecarb package by Steeve Comeau, Heloise Lavigne and Jean-Pierre Gattuso
TA[i,1]<-name
TA[i,2]<-1000000*at(S=s,T=mean(Data$Temperature[mV], na.rm=T), C=c, d=d, pHTris=NULL, ETris=NULL, weight=mass, E=Data$mV[mV], volume=Data$Volume[mV])
TA[i,3]<-mass
#TA[i,4]<-sample.index
}
TA[,2:3]<-sapply(TA[,2:3], as.numeric) # make sure the appropriate columns are numeric
#exports your data as a CSV file
write.table(TA,paste0(path,"/","TA_Output_",titrationfile),sep=",", row.names=FALSE)
#Cumulative TA
cumu.data <- read.csv("Data/Cumulative_TA_Output.csv", header=TRUE, sep=",")
update.data <- rbind(cumu.data, TA)
write.table(update.data,"Data/Cumulative_TA_Output.csv",sep=",", row.names=FALSE)
# modified for personal Lenovo PC at PT Whitney summer 2018
# last modification on 20180629 by SJG
setwd("C:/Users/samjg/Documents/My_Projects/Geoduck_transgen_offspring_OA/RAnalysis/Data/pH_Calibration_Files/") #set working directory
Calib.Data <-read.table("20190408.csv", header=TRUE, sep=",", na.string="NA", as.is=TRUE) #reads in the data files
model <-lm(mVTris ~ TTris, data=Calib.Data) #runs a linear regression of mV as a function of temperature
coe <- coef(model) #extracts the coeffecients
R2<-summary(model)$r.squared
plot(mVTris ~ TTris, data=Calib.Data)
abline(lm(mVTris ~ TTris, data=Calib.Data))
legend('topleft', legend = bquote(R^2 == .(format(R2, digits = 3))), bty='n')
# modified for personal Lenovo PC at PT Whitney summer 2018
# last modification on 20180629 by SJG
setwd("C:/Users/samjg/Documents/My_Projects/Geoduck_transgen_offspring_OA/RAnalysis/Data/pH_Calibration_Files/") #set working directory
Calib.Data <-read.table("20190320.csv", header=TRUE, sep=",", na.string="NA", as.is=TRUE) #reads in the data files
model <-lm(mVTris ~ TTris, data=Calib.Data) #runs a linear regression of mV as a function of temperature
coe <- coef(model) #extracts the coeffecients
R2<-summary(model)$r.squared
plot(mVTris ~ TTris, data=Calib.Data)
abline(lm(mVTris ~ TTris, data=Calib.Data))
legend('topleft', legend = bquote(R^2 == .(format(R2, digits = 3))), bty='n')
# modified for personal Lenovo PC at PT Whitney summer 2018
# last modification on 20180629 by SJG
setwd("C:/Users/samjg/Documents/My_Projects/Geoduck_transgen_offspring_OA/RAnalysis/Data/pH_Calibration_Files/") #set working directory
Calib.Data <-read.table("20190321.csv", header=TRUE, sep=",", na.string="NA", as.is=TRUE) #reads in the data files
model <-lm(mVTris ~ TTris, data=Calib.Data) #runs a linear regression of mV as a function of temperature
coe <- coef(model) #extracts the coeffecients
R2<-summary(model)$r.squared
plot(mVTris ~ TTris, data=Calib.Data)
abline(lm(mVTris ~ TTris, data=Calib.Data))
legend('topleft', legend = bquote(R^2 == .(format(R2, digits = 3))), bty='n')
# modified for personal Lenovo PC at PT Whitney summer 2018
# last modification on 20180629 by SJG
setwd("C:/Users/samjg/Documents/My_Projects/Geoduck_transgen_offspring_OA/RAnalysis/Data/pH_Calibration_Files/") #set working directory
Calib.Data <-read.table("20190322.csv", header=TRUE, sep=",", na.string="NA", as.is=TRUE) #reads in the data files
model <-lm(mVTris ~ TTris, data=Calib.Data) #runs a linear regression of mV as a function of temperature
coe <- coef(model) #extracts the coeffecients
R2<-summary(model)$r.squared
plot(mVTris ~ TTris, data=Calib.Data)
abline(lm(mVTris ~ TTris, data=Calib.Data))
legend('topleft', legend = bquote(R^2 == .(format(R2, digits = 3))), bty='n')
# modified for personal Lenovo PC at PT Whitney summer 2018
# last modification on 20180629 by SJG
setwd("C:/Users/samjg/Documents/My_Projects/Geoduck_transgen_offspring_OA/RAnalysis/Data/pH_Calibration_Files/") #set working directory
Calib.Data <-read.table("20190323.csv", header=TRUE, sep=",", na.string="NA", as.is=TRUE) #reads in the data files
model <-lm(mVTris ~ TTris, data=Calib.Data) #runs a linear regression of mV as a function of temperature
coe <- coef(model) #extracts the coeffecients
R2<-summary(model)$r.squared
plot(mVTris ~ TTris, data=Calib.Data)
abline(lm(mVTris ~ TTris, data=Calib.Data))
legend('topleft', legend = bquote(R^2 == .(format(R2, digits = 3))), bty='n')
# modified for personal Lenovo PC at PT Whitney summer 2018
# last modification on 20180629 by SJG
setwd("C:/Users/samjg/Documents/My_Projects/Geoduck_transgen_offspring_OA/RAnalysis/Data/pH_Calibration_Files/") #set working directory
Calib.Data <-read.table("20190324.csv", header=TRUE, sep=",", na.string="NA", as.is=TRUE) #reads in the data files
model <-lm(mVTris ~ TTris, data=Calib.Data) #runs a linear regression of mV as a function of temperature
coe <- coef(model) #extracts the coeffecients
R2<-summary(model)$r.squared
plot(mVTris ~ TTris, data=Calib.Data)
abline(lm(mVTris ~ TTris, data=Calib.Data))
legend('topleft', legend = bquote(R^2 == .(format(R2, digits = 3))), bty='n')
# modified for personal Lenovo PC at PT Whitney summer 2018
# last modification on 20180629 by SJG
setwd("C:/Users/samjg/Documents/My_Projects/Geoduck_transgen_offspring_OA/RAnalysis/Data/pH_Calibration_Files/") #set working directory
Calib.Data <-read.table("20190325.csv", header=TRUE, sep=",", na.string="NA", as.is=TRUE) #reads in the data files
model <-lm(mVTris ~ TTris, data=Calib.Data) #runs a linear regression of mV as a function of temperature
coe <- coef(model) #extracts the coeffecients
R2<-summary(model)$r.squared
plot(mVTris ~ TTris, data=Calib.Data)
abline(lm(mVTris ~ TTris, data=Calib.Data))
legend('topleft', legend = bquote(R^2 == .(format(R2, digits = 3))), bty='n')
# modified for personal Lenovo PC at PT Whitney summer 2018
# last modification on 20180629 by SJG
setwd("C:/Users/samjg/Documents/My_Projects/Geoduck_transgen_offspring_OA/RAnalysis/Data/pH_Calibration_Files/") #set working directory
Calib.Data <-read.table("20190326.csv", header=TRUE, sep=",", na.string="NA", as.is=TRUE) #reads in the data files
model <-lm(mVTris ~ TTris, data=Calib.Data) #runs a linear regression of mV as a function of temperature
coe <- coef(model) #extracts the coeffecients
R2<-summary(model)$r.squared
plot(mVTris ~ TTris, data=Calib.Data)
abline(lm(mVTris ~ TTris, data=Calib.Data))
legend('topleft', legend = bquote(R^2 == .(format(R2, digits = 3))), bty='n')
# modified for personal Lenovo PC at PT Whitney summer 2018
# last modification on 20180629 by SJG
setwd("C:/Users/samjg/Documents/My_Projects/Geoduck_transgen_offspring_OA/RAnalysis/Data/pH_Calibration_Files/") #set working directory
Calib.Data <-read.table("20190326.csv", header=TRUE, sep=",", na.string="NA", as.is=TRUE) #reads in the data files
model <-lm(mVTris ~ TTris, data=Calib.Data) #runs a linear regression of mV as a function of temperature
coe <- coef(model) #extracts the coeffecients
R2<-summary(model)$r.squared
plot(mVTris ~ TTris, data=Calib.Data)
abline(lm(mVTris ~ TTris, data=Calib.Data))
legend('topleft', legend = bquote(R^2 == .(format(R2, digits = 3))), bty='n')
# modified for personal Lenovo PC at PT Whitney summer 2018
# last modification on 20180629 by SJG
setwd("C:/Users/samjg/Documents/My_Projects/Geoduck_transgen_offspring_OA/RAnalysis/Data/pH_Calibration_Files/") #set working directory
Calib.Data <-read.table("20190327.csv", header=TRUE, sep=",", na.string="NA", as.is=TRUE) #reads in the data files
model <-lm(mVTris ~ TTris, data=Calib.Data) #runs a linear regression of mV as a function of temperature
coe <- coef(model) #extracts the coeffecients
R2<-summary(model)$r.squared
plot(mVTris ~ TTris, data=Calib.Data)
abline(lm(mVTris ~ TTris, data=Calib.Data))
legend('topleft', legend = bquote(R^2 == .(format(R2, digits = 3))), bty='n')
# modified for personal Lenovo PC at PT Whitney summer 2018
# last modification on 20180629 by SJG
setwd("C:/Users/samjg/Documents/My_Projects/Geoduck_transgen_offspring_OA/RAnalysis/Data/pH_Calibration_Files/") #set working directory
Calib.Data <-read.table("20190328.csv", header=TRUE, sep=",", na.string="NA", as.is=TRUE) #reads in the data files
model <-lm(mVTris ~ TTris, data=Calib.Data) #runs a linear regression of mV as a function of temperature
coe <- coef(model) #extracts the coeffecients
R2<-summary(model)$r.squared
plot(mVTris ~ TTris, data=Calib.Data)
abline(lm(mVTris ~ TTris, data=Calib.Data))
legend('topleft', legend = bquote(R^2 == .(format(R2, digits = 3))), bty='n')
# modified for personal Lenovo PC at PT Whitney summer 2018
# last modification on 20180629 by SJG
setwd("C:/Users/samjg/Documents/My_Projects/Geoduck_transgen_offspring_OA/RAnalysis/Data/pH_Calibration_Files/") #set working directory
Calib.Data <-read.table("20190328.csv", header=TRUE, sep=",", na.string="NA", as.is=TRUE) #reads in the data files
model <-lm(mVTris ~ TTris, data=Calib.Data) #runs a linear regression of mV as a function of temperature
coe <- coef(model) #extracts the coeffecients
R2<-summary(model)$r.squared
plot(mVTris ~ TTris, data=Calib.Data)
abline(lm(mVTris ~ TTris, data=Calib.Data))
legend('topleft', legend = bquote(R^2 == .(format(R2, digits = 3))), bty='n')
# modified for personal Lenovo PC at PT Whitney summer 2018
# last modification on 20180629 by SJG
setwd("C:/Users/samjg/Documents/My_Projects/Geoduck_transgen_offspring_OA/RAnalysis/Data/pH_Calibration_Files/") #set working directory
Calib.Data <-read.table("20190329.csv", header=TRUE, sep=",", na.string="NA", as.is=TRUE) #reads in the data files
model <-lm(mVTris ~ TTris, data=Calib.Data) #runs a linear regression of mV as a function of temperature
coe <- coef(model) #extracts the coeffecients
R2<-summary(model)$r.squared
plot(mVTris ~ TTris, data=Calib.Data)
abline(lm(mVTris ~ TTris, data=Calib.Data))
legend('topleft', legend = bquote(R^2 == .(format(R2, digits = 3))), bty='n')
# modified for personal Lenovo PC at PT Whitney summer 2018
# last modification on 20180629 by SJG
setwd("C:/Users/samjg/Documents/My_Projects/Geoduck_transgen_offspring_OA/RAnalysis/Data/pH_Calibration_Files/") #set working directory
Calib.Data <-read.table("20190329.csv", header=TRUE, sep=",", na.string="NA", as.is=TRUE) #reads in the data files
model <-lm(mVTris ~ TTris, data=Calib.Data) #runs a linear regression of mV as a function of temperature
coe <- coef(model) #extracts the coeffecients
R2<-summary(model)$r.squared
plot(mVTris ~ TTris, data=Calib.Data)
abline(lm(mVTris ~ TTris, data=Calib.Data))
legend('topleft', legend = bquote(R^2 == .(format(R2, digits = 3))), bty='n')
#Geoduck Conditioning
#Data published in X
#Title:
#Contact: Hollie Putnam hollieputnam@gmail.com
#Supported by: FFAR
#See Readme file for details on data files and metadata
# path changes made on 20180712 sor SJG personal comp at Pt Whitney - original paths kept with #
rm(list=ls()) # removes all prior objects
#R Version: R version 3.3.1
#RStudio Version: 1.0.44
######Read in required libraries#####
library(car) #version 2.1-4 Date: 2016-11-30 Depends: R (>= 3.2.0) Imports:MASS, mgcv, nnet, pbkrtest (>= 0.3-2), quantreg, grDevices, utils, stats, graphics, Rcpp
library(ggplot2) #version 2.2.1 Date/Publication: 2016-12-30 Depends: R (>= 3.1) Imports: digest, grid, gtable (>= 0.1.1), MASS, plyr (>= 1.7.1),reshape2, scales (>= 0.4.1), stats, tibble, lazyeval
library(gridExtra) #version: 2.2.1 Date/Publication: 2016-02-29 Depends: R(>= 2.5.0) Imports: gtable, grid, grDevices, graphics, utils
library(lsmeans)  #version: 2.26-3 Date: 2017-05-09 Depends: estimability, methods, R (>= 3.0) Imports: graphics, stats, utils, nlme, coda (>= 0.17), multcomp, plyr,mvtnorm, xtable (>= 1.8-2)
library(multcomp) #version: 1.4-6 Date: 2016-07-14 Depends: stats, graphics, mvtnorm (>= 1.0-3), survival (>= 2.39-4), TH.data (>= 1.0-2)
library(nlme) #version: 3.1-131 Date: 2017-02-06 Depends: R (>= 3.0.2) Imports: graphics, stats, utils, lattice
library(plotrix) #version: 3.6-5 Date: 2017-05-09 Depends: NA Imports: grDevices, graphics, stats, utils
library(plyr) #version: 1.8.4 Date/Publication: 2016-06-08 Depends: R (>= 3.1.0) Imports: Rcpp (>= 0.11.0)
library(reshape) #version: 3.3.1 Date/Publication: 2016-06-24  Depends: R (>= 3.3.1)
library(seacarb) #version: 3.2 Date/Publication: 2017-06-19 Depends: R (>= 2.10), oce, gsw Imports: NA
library(grid) #version: 3.3.1 Date/Publication: 2016-06-24  Depends: R (>= 3.3.1)
library(xtable) #version 1.8-2 Date/Publication: 2016-01-08 Depends: R (>= 2.10.0)
library(lme4) #version: 1.1-13 Date/Publication: 2017-04-19 Depends: R (>= 3.0.2), Matrix (>= 1.1.1), methods, stats Imports: graphics, grid, splines, utils, parallel, MASS, lattice, nlme(>= 3.1-123), minqa (>= 1.1.15), nloptr (>= 1.0.4)
library(blmeco) #version: 1.1 Date/Publication: 2015-08-22 Depends: R (>= 3.0.0), stats, MASS Imports: MuMIn, arm, lme4
library(MuMIn) #version: 1.15.6 Date/Publication: 2016-01-07 Depends: R (>= 3.0.0) Imports: graphics, methods, Matrix, stats, stats4
#####Required Data files#####
#CRM_TA_Data.csv
#Daily_Temp_pH_Sal.csv
#~/MyProjects/BioMin_HIS/RAnalysis/Data/pH_Calibration_Files
#############################################################
setwd("C:/Users/samjg/Documents/My_Projects/Geoduck_transgen_offspring_OA/RAnalysis/Data") #set working directory
#setwd("~/MyProjects/Geoduck_Conditioning/RAnalysis/Data") #set working directory
mainDir<-'C:/Users/samjg/Documents/My_Projects/Geoduck_transgen_offspring_OA/RAnalysis/' #set main directory
# mainDir<-'~/MyProjects/Geoduck_Conditioning/RAnalysis/' #set main directory
#############################################################
##### DISCRETE pH CALCULATIONS #####
# path <-("~/MyProjects/Geoduck_Conditioning/RAnalysis/Data/pH_Calibration_Files/")
path <-("C:/Users/samjg/Documents/My_Projects/Geoduck_transgen_offspring_OA/RAnalysis/Data/pH_Calibration_Files/")
file.names<-list.files(path = path, pattern = "csv$") #list all the file names in the folder to get only get the csv files
pH.cals <- data.frame(matrix(NA, nrow=length(file.names), ncol=3, dimnames=list(file.names,c("Date", "Intercept", "Slope")))) #generate a 3 column dataframe with specific column names
for(i in 1:length(file.names)) { # for every file in list start at the first and run this following function
Calib.Data <-read.table(file.path(path,file.names[i]), header=TRUE, sep=",", na.string="NA", as.is=TRUE) #reads in the data files
model <-lm(mVTris ~ TTris, data=Calib.Data) #runs a linear regression of mV as a function of temperature
coe <- coef(model) #extracts the coeffecients
summary(model)$r.squared
plot(Calib.Data$mVTris, Calib.Data$TTris)
pH.cals[i,2:3] <- coe #inserts them in the dataframe
pH.cals[i,1] <- substr(file.names[i],1,8) #stores the file name in the Date column
}
colnames(pH.cals) <- c("Calib.Date",  "Intercept",  "Slope") #rename columns
pH.cals #view data
#constants for use in pH calculation
R <- 8.31447215 #gas constant in J mol-1 K-1
F <-96485.339924 #Faraday constant in coulombs mol-1
#read in probe measurements of pH, temperature, and salinity from tanks
daily <- read.csv("Daily_Temp_pH_Sal.csv", header=TRUE, sep=",", na.strings="NA") #load data with a header, separated by commas, with NA as NA
#merge with Seawater chemistry file
SW.chem <- merge(pH.cals, daily, by="Calib.Date")
mvTris <- SW.chem$Temperature*SW.chem$Slope+SW.chem$Intercept #calculate the mV of the tris standard using the temperature mv relationships in the measured standard curves
STris<-34.5 #salinity of the Tris
phTris<- (11911.08-18.2499*STris-0.039336*STris^2)*(1/(SW.chem$Temperature+273.15))-366.27059+ 0.53993607*STris+0.00016329*STris^2+(64.52243-0.084041*STris)*log(SW.chem$Temperature+273.15)-0.11149858*(SW.chem$Temperature+273.15) #calculate the pH of the tris (Dickson A. G., Sabine C. L. and Christian J. R., SOP 6a)
SW.chem$pH.Total<-phTris+(mvTris/1000-SW.chem$pH.MV/1000)/(R*(SW.chem$Temperature+273.15)*log(10)/F) #calculate the pH on the total scale (Dickson A. G., Sabine C. L. and Christian J. R., SOP 6a)
# pdf("~/MyProjects/Geoduck_Conditioning/RAnalysis/Output/Daily_Treatment_Measures.pdf")
pdf("C:/Users/samjg/Documents/My_Projects/Geoduck_transgen_offspring_OA/RAnalysis/Output/Daily_Treatment_Measures.pdf")
par(mfrow=c(3,2))
plot(SW.chem$Treatment, SW.chem$Temperature, xlab="Treatment", ylab="TemperatureÂ°C", ylim=c(12,20))
plot(SW.chem$Treatment, SW.chem$pH.Total, xlab="Treatment", ylab="pH Total Scale", ylim=c(7.0,8.2))
plot(SW.chem$Treatment, SW.chem$Salinity, xlab="Treatment", ylab="Salinity psu", ylim=c(26,30))
dev.off()
# pdf("~/MyProjects/Geoduck_Conditioning/RAnalysis/Output/Daily_Tank_Measures.pdf")
pdf("C:/Users/samjg/Documents/My_Projects/Geoduck_transgen_offspring_OA/RAnalysis/Output/Daily_Treatment_Measures.pdf")
par(mfrow=c(3,2))
plot(SW.chem$Sample.ID, SW.chem$Temperature, xlab="Tank", ylab="TemperatureÂ°C", ylim=c(12,20),las=2)
plot(SW.chem$Sample.ID, SW.chem$pH.Total, xlab="Tank", ylab="pH Total Scale", ylim=c(6.5,8.2),las=2)
plot(SW.chem$Sample.ID, SW.chem$Salinity, xlab="Tank", ylab="Salinity psu", ylim=c(26,30))
dev.off()
##### DISCRETE TA CALCULATIONS #####
TA <- read.csv("Cumulative_TA_Output.csv", header=TRUE, sep=",", na.strings="NA")  #read in  TA results
##### SEAWATER CHEMISTRY ANALYSIS FOR DISCRETE MEASUREMENTS#####
#Seawater chemistry table from simultaneous TA, pH, temperature and salinity measurements
#merge calculated pH and daily measures with TA data and run seacarb
SW.chem$Sample.ID <- paste(SW.chem$Date, SW.chem$Sample.ID, sep='_') #generate new row with concatenated sample id
SW.chem <- merge(SW.chem,TA, by="Sample.ID", all = TRUE, sort = T) #merge seawater chemistry with total alkalinity
SW.chem <- na.omit(SW.chem) #remove NA
#Calculate CO2 parameters using seacarb
carb.output <- carb(flag=8, var1=SW.chem$pH.Total, var2=SW.chem$TA/1000000, S= SW.chem$Salinity, T=SW.chem$Temperature, P=0, Pt=0, Sit=0, pHscale="T", kf="pf", k1k2="l", ks="d") #calculate seawater chemistry parameters using seacarb
carb.output$ALK <- carb.output$ALK*1000000 #convert to Âµmol kg-1
carb.output$CO2 <- carb.output$CO2*1000000 #convert to Âµmol kg-1
carb.output$HCO3 <- carb.output$HCO3*1000000 #convert to Âµmol kg-1
carb.output$CO3 <- carb.output$CO3*1000000 #convert to Âµmol kg-1
carb.output$DIC <- carb.output$DIC*1000000 #convert to Âµmol kg-1
carb.output <- carb.output[,-c(1,4,5,8,10:13,19)] #subset variables of interest
carb.output <- cbind(SW.chem$Date,  SW.chem$Sample.ID,  SW.chem$Treatment, carb.output) #combine the sample information with the seacarb output
colnames(carb.output) <- c("Date",  "Tank",  "Treatment",	"Salinity",	"Temperature", "pH",	"CO2",	"pCO2","HCO3",	"CO3",	"DIC", "TA",	"Aragonite.Sat") #Rename columns to describe contents
# write.table(carb.output, "~/MyProjects/BioMin_HIS/RAnalysis/Output/Seawater_chemistry_table_Output_All.csv", sep=",", row.names = FALSE) #save data
write.table(carb.output, "C:/Users/samjg/Documents/My_Projects/Geoduck_transgen_offspring_OA/RAnalysis/Output/Seawater_chemistry_table_Output_All.csv", sep=",", row.names = FALSE) #save data
carbo.melted <- melt(carb.output) #reshape the dataframe to more easily summarize all output parameters
mean.carb.output <-ddply(carbo.melted, .(Treatment, variable), summarize, #For each subset of a data frame, apply function then combine results into a data frame.
N = length(na.omit(value)), #number of records
mean = (mean(value)),       #take the average of the parameters (variables) summarized by treatments
sem = (sd(value)/sqrt(N))) #calculate the SEM as the sd/sqrt of the count or data length
mean.carb.output # display mean and sem
# pdf("~/MyProjects/Geoduck_Conditioning/RAnalysis/Output/Water_Chem_withTA.pdf")
# CHECK YOUR Y AXIS!
pdf("C:/Users/samjg/Documents/My_Projects/Geoduck_transgen_offspring_OA/RAnalysis/Output/Water_Chem_withTA.pdf")
par(mfrow=c(3,2))
plot(carb.output$Treatment, carb.output$Temperature, xlab="Treatment", ylab="TemperatureÂ°C", ylim=c(8,16))
plot(carb.output$Treatment, carb.output$pH, xlab="Treatment", ylab="pH Total Scale", ylim=c(6.5,8.2))
plot(carb.output$Treatment, carb.output$pCO2, xlab="Treatment", ylab="pCO2 Âµmol kg-1", ylim=c(350,8000))
plot(carb.output$Treatment, carb.output$Salinity, xlab="Treatment", ylab="Salinity psu", ylim=c(25,30))
plot(carb.output$Treatment, carb.output$TA, xlab="Treatment", ylab="Total Alkalinity Âµmol kg-1", ylim=c(1800,2400))
plot(carb.output$Treatment, carb.output$Aragonite.Sat, xlab="Treatment", ylab="Aragonite Saturation State", ylim=c(0,2))
dev.off()
